<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小区路口的理发师</title>
    <link href="/2022/10/29/%E5%B0%8F%E5%8C%BA%E8%B7%AF%E5%8F%A3%E7%9A%84%E7%90%86%E5%8F%91%E5%B8%88/"/>
    <url>/2022/10/29/%E5%B0%8F%E5%8C%BA%E8%B7%AF%E5%8F%A3%E7%9A%84%E7%90%86%E5%8F%91%E5%B8%88/</url>
    
    <content type="html"><![CDATA[<p>我的小区路口有一家理发店，理发的价格是15元一次。自从在县城理发付了70元的学费后我便成为这家理发店的常客。</p><p>这间理发店十分简陋，门口总是摆放着一辆黑色的敞篷小三轮，大概是他的交通工具，走进理发店，大约20平米的空间只简单摆放了几件沾满时光气息的家具以及一些理发工具。仔细闻闻，空气中还夹带着几丝腐败的难闻气息。</p><p>店主是一位约莫30来岁的细瘦男子，留着一头微卷的中分。每当我踏进门，他都会停下手里的工作，甩甩头发笑着说，“稍微坐一会儿哦，我这个很快就好。”</p><p>我一向不喜欢和理发师多沟通，只想安安静静的坐着，等待理发师剪好头发，然后离开。然而大部分理发师总喜欢和你闲聊几句，有些会和你聊聊工作八卦之类的家常，离谱的直接给你推荐几套会员卡套餐。</p><p>但是这个理发师却很安静，每次理发只是简单招呼我先过去洗个头，然后问我想怎么打理头发，接着便默默地开始他的工作。随着次数增多，话语更是精简到只剩开局的一句“和往常一样吗？”。</p><p>深得我心。</p><p>我曾经以为他就是这么一个不善言辞的人，直到有一次前去理发，听见他和座椅上的大妈闲聊地有来有回，我这才知道，原来他并非不善言辞，只不过是在照顾不同顾客的习惯罢了。</p><p>由此看来我其实和这个理发师并没有什么过多的交集，我不曾和他深入交流过，只不过偶尔从他和客人之间的谈话中听得一些事。</p><p>听闻他30多岁一直没有女朋友，后来在亲戚介绍下与一个离异带孩的女子草草结了婚。</p><p>他是这么说的，</p><p>“我也已经老大不小了，自己的条件不怎么样也不能对别人要求太高。何况这个女子人也不错，也是该有个家了。”</p><p>此处所说的女子我也见过几次，是一个身体有些发福的中年女人。有时她会抱着孩子坐在一旁的破旧沙发上，望着怀中酣睡的小孩，轻轻摇晃臂弯。眉眼之间尽是温柔。</p><p>上周，我在县城的街上与他偶遇，他坐在小三轮上停靠在路边，我走向前和他打招呼。</p><p>“呦！我也是xx小区的，去你那儿理过几次头发。你在这儿干嘛呢？”</p><p>他见着我，先是愣了一会儿，然后开心地说，“哦……哦！我带小孩子打针，老婆在上厕所，我在等她。”</p><p>我看向他的怀中，即使在吵闹的街区，孩子依然睡的十分安稳。</p><p>简单寒喧几句过后我说自己要走了，他像是巧遇故友却又要分别一样，热情地同我道别。</p><p>我不曾了解他的生活，不过我记得当时离开的路上，心情不错。</p>]]></content>
    
    
    <categories>
      
      <category>生活记事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>身边小事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 开机挂载磁盘和swap分区</title>
    <link href="/2022/10/10/linux%20%E5%BC%80%E6%9C%BA%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98%E5%92%8Cswap%E5%88%86%E5%8C%BA/"/>
    <url>/2022/10/10/linux%20%E5%BC%80%E6%9C%BA%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98%E5%92%8Cswap%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近manjaro经常内存爆满，16G的物理内存理应来说是够的，但是不知道为什么有时候某个软件会突然占用过高的内存，后来发现是没有启用swap分区，但不知能否解决内存溢出的问题，先记下启用swap分区的方法。 Linux 中的 Swap 交换分区就是 Windows 中的虚拟内存，将Linux系统服务器中的物理硬盘空间虚拟化成内存使用，以解决内存不够的问题。不同的Linux【CentOS&#x2F;Ubuntu&#x2F;Debian】发行版新建，增加 Swap 分区的方法是一样的，下面致臻数据就分享下如何确定和创建 Swap 分区及大小。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="swap分区需要的大小"><a href="#swap分区需要的大小" class="headerlink" title="swap分区需要的大小"></a>swap分区需要的大小</h3><ol><li>&lt;&#x3D; 4g 至少 4G</li><li>4~16G 至少 8G</li><li>16G~64G 至少 16G</li><li>64G~256G 至少 32G</li></ol><h3 id="创建swap分区"><a href="#创建swap分区" class="headerlink" title="创建swap分区"></a>创建swap分区</h3><p>创建命令如下，其中 &#x2F;var&#x2F;swapfile 是文件位置，bs*count 是文件大下，比如我创建一个 16G 的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">dd if=/dev/zero of=/var/swapfile bs=4M count=4096<br></code></pre></td></tr></table></figure><h3 id="建立swap文件系统"><a href="#建立swap文件系统" class="headerlink" title="建立swap文件系统"></a>建立swap文件系统</h3><p>将文件格式化为swap分区文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">mkswap /var/swapfile<br></code></pre></td></tr></table></figure><h3 id="启用swap分区"><a href="#启用swap分区" class="headerlink" title="启用swap分区"></a>启用swap分区</h3><p>启用分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">swapon /var/swapfile<br></code></pre></td></tr></table></figure><p>查看是否成功启用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">free -m<br></code></pre></td></tr></table></figure><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><p>编辑<code>/etc/fstab</code>文件，在文件末尾加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">/var/swapfile swap swap defaults 0 0<br></code></pre></td></tr></table></figure><p>注意：中间用tab分割</p><h3 id="修改swappiness参数"><a href="#修改swappiness参数" class="headerlink" title="修改swappiness参数"></a>修改swappiness参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">vim /proc/sys/vm/swappiness<br></code></pre></td></tr></table></figure><p>内容的值来确定系统对 SWAP 分区的使用原则。当 swappiness 内容的值为 0 时，表示最大限度地使用物理内存，物理内存使用完毕后，才会使用 SWAP 分区。当 swappiness 内容的值为 100 时，表示积极地使用 SWAP 分区，并且把内存中的数据及时地置换到 SWAP 分区。 查看修改前为 0，需要在物理内存使用完毕后才会使用 SWAP 分区。 可以使用下述方法临时修改此参数，假设我们配置为空闲内存少于 15% 时才使用 SWAP 分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">echo 15 &gt;/proc/sys/vm/swappiness<br></code></pre></td></tr></table></figure><p>若需要永久修改此配置，在系统重启之后也生效的话，可以修改 <code>/etc/sysctl.conf</code> 文件，并增加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">vm.swappiness=15<br></code></pre></td></tr></table></figure><h3 id="挂载机械硬盘"><a href="#挂载机械硬盘" class="headerlink" title="挂载机械硬盘"></a>挂载机械硬盘</h3><p>也是编辑<code>/etc/fstab</code>文件 在末尾加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">/dev/sda1 /data ntfs defaults 0 0<br></code></pre></td></tr></table></figure><p>配置完成后可用<code>sudo mount -a</code>检查是否配置成功</p><h3 id="为某个用户挂载"><a href="#为某个用户挂载" class="headerlink" title="为某个用户挂载"></a>为某个用户挂载</h3><p>加入uid和gid参数，查看当前用户的uid的指令为<code>id</code></p><h2 id="etc-fstab详解"><a href="#etc-fstab详解" class="headerlink" title="etc/fstab详解"></a><code>etc/fstab</code>详解</h2><h4 id="文件作用"><a href="#文件作用" class="headerlink" title="文件作用"></a>文件作用</h4><p>磁盘被手动挂载之后都必须把挂载信息写入&#x2F;etc&#x2F;fstab这个文件中，否则下次开机启动时仍然需要重新挂载。  系统开机时会主动读取&#x2F;etc&#x2F;fstab文件中的内容，根据文件这个里面的配置挂载磁盘。这样我们只需要将磁盘的挂载信息写入这个文件中我们就不需要每次开机启动之后手动进行挂载了。  </p><h4 id="挂载的限制"><a href="#挂载的限制" class="headerlink" title="挂载的限制"></a>挂载的限制</h4><ol><li>根目录是必须挂载的，而且一定要先于其他mount point被挂载。因为mount是所有目录的跟目录，其他木有都是由根目录 &#x2F;衍生出来的。</li><li>挂载点必须是已经存在的目录。</li><li>挂载点的指定可以任意，但必须遵守必要的系统目录架构原则</li><li>所有挂载点在同一时间只能被挂载一次</li><li>所有分区在同一时间只能挂在一次</li><li>若进行卸载，必须将工作目录退出挂载点（及其子目录）之外。</li></ol><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>label或uid 用唯一名称定位需要挂载的分区或磁盘</p><p>挂载点 需要挂载到哪个目录下</p><p>磁盘的系统</p><p>文件系统的参数</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Async&#x2F;sync</td><td>设置是否为同步方式运行，默认为 async</td></tr><tr><td>auto&#x2F;noauto</td><td>当下载 mount -a 的命令时，此文件系统是否被主动挂载。默认为 auto</td></tr><tr><td>rw&#x2F;ro</td><td>是否以以只读或者读写模式挂载</td></tr><tr><td>exec&#x2F;noexec</td><td>限制此文件系统内是否能够进行 “执行” 的操作</td></tr><tr><td>user&#x2F;nouser</td><td>是否允许用户使用 mount 命令挂载</td></tr><tr><td>suid&#x2F;nosuid</td><td>是否允许 SUID 的存在</td></tr><tr><td>Usrquota</td><td>启动文件系统支持磁盘配额模式</td></tr><tr><td>Grpquota</td><td>启动文件系统对群组磁盘配额模式的支持</td></tr><tr><td>Defaults</td><td>同事具有 rw,suid,dev,exec,auto,nouser,async 等默认参数的设置</td></tr></tbody></table><p>dump 是否使用dump备份，0表示不需要，1表示每天，2表示不定日期，备份我一般使用其他方式，所以填0就好</p><p>是否检验 0表示不需要，1表示最早（一般根目录需要），2表示1级别完成之后进行检验</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哑</title>
    <link href="/2022/06/11/%E3%80%8A%E4%BB%A5%E5%A4%AA%E3%80%8B/"/>
    <url>/2022/06/11/%E3%80%8A%E4%BB%A5%E5%A4%AA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读《以太》有感"><a href="#读《以太》有感" class="headerlink" title="读《以太》有感"></a>读《以太》有感</h2><p>以下是本书对”以太”描写的原文：</p><blockquote><p>国会秘密通过第33条宪法修正案成立联邦信息安全委员会，对可能危害社会稳定和国家安全的信息进行过滤和替换，在漫长的尝试后，一套高效率的系统逐渐形成，这个系统叫作“以太”。最初，“以太”是工作在互联网上、对互联网设备和移动互联网设备进行监控的自动化体系，它对一切被认定存在潜在威胁的文字、视频、音频进行数据欺骗。简单举例，语义分析接口认定一个讨论组中的有害主题，“以太”对接入该讨论组所在服务器的所有相关会话发送欺骗信息，除发表者之外，其他人看到的都是经过调制的讨论话题，同时，信息发送者被数据库记录。假如你发表名为“参议员的午餐”的话题，被判定为有害信息，运行于巨型计算机上的、因法律体系而凌驾于所有网络防火墙之上的“以太”将在其他程序会话接入之前控制所有端口，将数据包中的相关字节替换，于是在别人眼里，你发表的话题就变成了无趣的“KFC超值午餐”。</p></blockquote><blockquote><p>随着“以太”的成功，联邦政府对广播、电视和纸质出版物的控制是顺理成章的结局，与“以太”同源的信息欺骗技术被用于隔离异见者，比如部分不肯认同信息安全法案的媒体人士。纳米微电子技术被用于信息欺骗，很快，掌权者意识到纳米机械在肉眼可见光范围内信息替换的潜力，第33条修正案颁布后的第七年，他们决定向空气中散播纳米微机械。这种微型设备悬浮在空气中，利用土壤和建筑材料中的硅进行自我复制，直至达到预定浓度，它们仅具有简单的机械结构，浓度达到规定程度后进入工作状态；它们会自动侦测具有潜在威胁的文字（可见光信号）和声音（音波信号），将其替换为无害信息，并将发布者记录在案。它们附着在印刷文本和标语牌表面，通过光偏振向除发布者之外的观察者发布欺骗光学信号；它们改变声波扩散形态，向除发布者之外的倾听者发布欺骗声学信号，当然，发布者本身因为骨骼的传导作用，听到的还是自己原本想说的话。飘浮在空气中的小恶魔使“以太”无所不能、无所不在，如同哲学家口中人类无法察觉却充满一切空间的神秘物质——“以太”本身。</p></blockquote><p>简单来说就是未来社会你在网络上发表的讨论，在现实里说的话，都被时刻监控着，并且被替换成“正确”的文字。就好像现在的论坛，你打的一些字被自动替换为：** 或者 口 等乱码，似乎就像是“以太”的雏形。不过在未来社会，这种现象会进一步加剧，连人与人之间的对话也在被以太监控着，我的耳朵永远不会听到肮脏的词汇，听不到阴谋论，世界开始变得美好…吗？</p><p>书中的主人公便是存在于这样的社会，世界被谎言包裹着，但是由于以太的隐秘性，主角根本不知道以太系统的存在，只是在过去的某一时刻突然发现世界变的无聊透顶。</p><blockquote><p>“有种东西在死去。”我左右望望，低声说，“你嗅不到腐烂的味道吗？电视节目里的评论员、报纸专栏作家、网络聊天组，自由的精神正在死去，像暴露在DDT中的蚊虫一样大规模死去。”</p></blockquote><p>世界失去了自由的声音，虽然所有人都在说着不同的话语，但好像说的都是一样的东西。在这样的世界里，主角感到麻木，一次机缘巧合下，主角加入了“手指聊天聚会”—一个通过手指交流的聚会。在这个被以太控制的世界，人们丧失话语权的世界，唯有用手指在彼此的手心写下精炼的短语才可以表达自己的真实想法。通过手指，我们可以讨论政治、讨论丑闻、表达任何思想，当然前提是掌握手指沟通的“语法”。</p><p>很滑稽却又很真实，我们拥有发声器官却没有办法“说话”，手指成了自由意志者最珍贵的礼物。</p><p>我查了下，这本科幻短篇发表于2013年，那还是一个比现在自由的多的时代，作者夸张的写出未来科技高度发展情况下，民众的言语被管控下的生活。现在看起来确实很夸张，可是又真实的让我背后发凉。不过这种事情一定发生在美国，我们大可不必担心。</p><p>其实想说的有很多，但是我却没办法说，或许我们已经被“以太”控制了。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ffmpeg推送RTMP流</title>
    <link href="/2022/05/29/%E4%BD%BF%E7%94%A8ffmpeg%E6%8E%A8%E9%80%81RTMP%E6%B5%81/"/>
    <url>/2022/05/29/%E4%BD%BF%E7%94%A8ffmpeg%E6%8E%A8%E9%80%81RTMP%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单位最近好像有网络直播的需要，说起网络直播，最常见的就是通过RTMP协议进行网络推流。 ffmpeg是一款开源的图像处理项目，可以方便的进行图像视频处理，推送操作，当然我们需要的推送RTMP流功能也可以很好的实现。 本文就以ffmpeg为工具进行RTMP的推送。</p><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><ol><li>在官网下载ffmpeg压缩包：<a href="http://ffmpeg.org/download.html">下载链接</a></li><li>解压到本地磁盘</li><li>将解压后的bin文件夹路径配置到系统环境变量中</li><li>打开cmd输入<code>ffmpeg –version</code>，可以看到ffmpeg的相关信息即可</li></ol><h2 id="配置RTMP服务器"><a href="#配置RTMP服务器" class="headerlink" title="配置RTMP服务器"></a>配置RTMP服务器</h2><ol><li>安装nginx，<a href="http://nginx.org/">下载地址</a></li><li>下载nginx-rtmp，<a href="https://github.com/illuspas/nginx-rtmp-win32">下载地址</a>下载后解压放到与nginx的同级目录</li><li>复制nginx的conf文件夹中的nginx-win.conf文件，在其末尾添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">rtmp &#123;<br>    server &#123;<br>        listen 1935;#监听端口,若被占用,可以更改<br>        chunk_size 4000;#上传flv文件块儿的大小<br>        application live &#123; #创建一个叫live的应用<br>             live on;#开启live的应用<br>             allow publish 127.0.0.1;#<br>             allow play all;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下代码可以实现将本地的视频以RTMP流的方式推送到RTMP服务器，实现网络直播。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">import cv2<br>import subprocess<br><br> camera_path = r&quot;本地视频地址&quot;<br><br> # 视频读取对象<br> cap = cv2.VideoCapture(camera_path) <br><br> # 读取一帧<br> ret, frame = cap.read()<br><br> # 推流地址<br> rtmp = &quot;RTMP服务器地址&quot;<br><br> fps = int(cap.get(cv2.CAP_PROP_FPS))<br> width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))<br> height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))<br> # 推流参数<br> command = [&#x27;D:\\ffmpeg\\bin\\ffmpeg.exe&#x27;,<br>    &#x27;-y&#x27;,<br>    &#x27;-f&#x27;, &#x27;rawvideo&#x27;,<br>    &#x27;-vcodec&#x27;,&#x27;rawvideo&#x27;,<br>    &#x27;-pix_fmt&#x27;, &#x27;bgr24&#x27;,<br>    &#x27;-s&#x27;, &quot;&#123;&#125;x&#123;&#125;&quot;.format(width, height),<br>    &#x27;-r&#x27;, str(fps),<br>    &#x27;-i&#x27;, &#x27;-&#x27;,<br>    &#x27;-c:v&#x27;, &#x27;libx264&#x27;,<br>    &#x27;-pix_fmt&#x27;, &#x27;yuv420p&#x27;,<br>    &#x27;-preset&#x27;, &#x27;ultrafast&#x27;,<br>    &#x27;-f&#x27;, &#x27;flv&#x27;, <br>    rtmp]<br><br> # 创建、管理子进程<br> pipe = subprocess.Popen(command, stdin=subprocess.PIPE)<br> size = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), <br> int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))<br><br> # 循环读取<br> while cap.isOpened():<br>    # 读取一帧<br>    ret, frame = cap.read()<br>    if frame is None:<br>    print(&#x27;read frame err!&#x27;)<br>    continue<br>    <br>    # 显示一帧<br>    cv2.imshow(&quot;frame&quot;, frame)<br>    <br>    # 按键退出<br>    if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;):<br>    break<br><br>    # 读取尺寸、推流<br>    img=cv2.resize(frame,size)<br>    pipe.stdin.write(img.tobytes()) <br><br> cv2.destroyAllWindows()<br><br> cap.release()<br></code></pre></td></tr></table></figure><p>启动程序后，使用VLC或者Potplayer等软件读取RTMP地址即可播放。</p><h2 id="ffmpeg-python包"><a href="#ffmpeg-python包" class="headerlink" title="ffmpeg-python包"></a>ffmpeg-python包</h2><p>通过以上代码确实能够实现ffmpeg的推流，不过实际上只是调用了ffmpeg自带的命令行工具，更改参数什么的不太方便，后来了解到python有ffmpeg的包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text-plain">pip install ffmpeg-python<br></code></pre></td></tr></table></figure><p>关于ffmpeg包的使用，下次再另写一篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>技术经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总有人会在未来等你</title>
    <link href="/2022/05/07/%E3%80%8A%E9%95%9C%E4%B9%8B%E5%AD%A4%E5%9F%8E%E3%80%8B/"/>
    <url>/2022/05/07/%E3%80%8A%E9%95%9C%E4%B9%8B%E5%AD%A4%E5%9F%8E%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读《镜之孤城》有感。"><a href="#读《镜之孤城》有感。" class="headerlink" title="读《镜之孤城》有感。"></a>读《镜之孤城》有感。</h2><p>之前从来没有想到我会因为看书而落泪，直到今天合上了这本书。</p><p>本书讲述的是七个因为各种原因想去学校而去不了的初中生，因为走进一面神奇的发着彩虹光芒的镜子进入一座城堡，需要寻找可以实现任何愿望的钥匙而产生的故事。<br>故事以安息心的视角展开，她是一个受到校园霸凌的孩子，所以对学校充满着恐惧，选择了逃避，不去上学，以及在她的视角下，了解到了其他6个孩子也是因为各种原因无法去学校上课。作为故事的主视角，作者对小心（校园霸凌受害者）的心理描写尤为出彩，令人共鸣。</p><blockquote><p>小心真正想要的是别人能告诉她，他至今为止并没有做错。</p></blockquote><p>明明什么都没有做错，为什么那些人要来欺负自己，为什么只欺负我，是不是我真的做错了什么，都怪我不好，做了惹他们不开心的事情…明明是受害者，但是却总是小心翼翼，甚至自己也产生了受害者有罪论的想法。那些校园暴力的施暴者，是心智不成熟吗，还是单纯的恶？而且为什么其他人好像只是当一个旁观者，没有人告诉我，我没有做错呢？明明错的是他们呀，只是一个很简单的道理，为什么当时没人说出来呢？</p><p>不是校园暴力的亲历者，真的很难体会到施暴者的无理程度。在城堡中，小心等7个孩子需要寻找“祈愿的钥匙”，用这个钥匙打开“祈愿的房间”能够实现一个任何愿望。小心内心许下的愿望是：</p><blockquote><p>要真田美织（施暴者）从这个世界上消失</p></blockquote><p>这是一个很可怕的愿望，但是却是唯一能够救赎小心的愿望。在十几岁的年纪里，对于世界的认识或许只停留在这个校园里，面对校园暴力时的无力感，老师、同学、家长，谁也帮不了自己。本该是属于这个年纪的美丽晴空，却在施暴者的折磨下，染成了看不到阳光的阴天。或许能做的只有在心里默默祈祷，出现奇迹，让施暴者消失吧。这是每一个校园暴力受害者最简单最恶毒的愿望了。</p><p>作为学生最亲近的老师，本该是作为理解和鼓励的一方，却只是简单处理了事，认为小心和美织他们只是在吵架。</p><blockquote><p>想不到老师是居然是这么轻飘飘的说法。一股强烈的反感，使他心中升起的怒气在脑子里沸腾了一般，意识到变得模糊了。<br>那可不是什么吵架呀！<br>吵架是互相语言能够相通的人才会进行的呀，属于更加对等的事情。</p></blockquote><p>学生的霸凌行为，在老师眼中估计只是小孩子玩闹吧，说实在的老师对于大部分人来说也只不过是一份谋生的职业罢了，再亲近的人都可能无法对彼此的遭遇感同身受，何况只是老师呢。所以大部分霸凌事件中，我们似乎都看不到老师的身影，你求助了老师，老师也不过是口头教育一下，加之采取叫家长等手段，似乎以为事情就此结束了，过段时间便抛之脑后。而那些霸凌者呢，则丝毫不会减轻自己的恶行。而那些受害者呢，在心中也留下了无法消失的伤疤。</p><p>只有小晶在听完小心对于自身经历的诉说后，温柔的说了这些：</p><blockquote><p>“了不起！”小晶说。<br>两个人的目光合在了一起后，小晶的眼睛直视着小心，温柔而又珍惜地说：<br>“了不起，你很坚强！”</p></blockquote><p>“你很坚强”，能够在承受了如此多的不公后依然坚持过来，你很坚强。简短的四个字在此刻却比什么都更有力量。陷入孤寂黑夜的孩子，最需要的就是一句温暖的肯定。不是以怜悯的眼光，不是以听故事的心态，而是听完之后的一句肯定，因为，我根本什么都没有做错呀。人们总是善于隐藏，将最痛最严重的伤疤藏在最深处。当揭开一层一层伪装后，渴望听到的，也仅仅是一句肯定和鼓励而已呀。</p><p>不止小心，其他6个孩子同样也承受着注入撒谎被指责、被同学孤立、被父母不抱期待、被继父性骚扰等挫折。每一个孩子都对现实恐惧着，所以选择进入城堡逃避现实，他们在城堡中只是在消磨时间，对于“祈愿的钥匙”也不是很看重，只是希望逃避罢了。</p><p>几乎每一天都有人在城堡里聊天、打游戏、或者什么都不做，只是呆在这儿。他们惊奇的发现原来他们都是同一所学校里不去上学的孩子，但又发现他们在现实中无法相见，因为他们似乎处于各自的平行世界中。</p><p>时间在城堡中一天天过去，快要到城堡关闭的时间了。</p><p>可是在关闭前的最后一天，小晶因为对现实绝望，一心寻死，所以没有在五点前回到现实。而根据城堡的规则，五点前没有回去的孩子会被狼吃掉，包括今天所有来过城堡的孩子，都会一起被吃掉。今天只有小心没有来过城堡，所以小心在今天必须拯救大家，这些给予他温暖的朋友们。</p><p>在过程中，小心读取了他们的记忆，知道了原来他们确实是来自同一个世界的，只不过来自不同时间。</p><blockquote><p>昴生活在 1985 年<br>小晶生活在 1992 年<br>小心和理音生活在 2006 年<br>政宗生活在 2013 年<br>风歌生活在 2020 年<br>嬉野生活在2027年</p></blockquote><p>最后小心找到了祈愿的钥匙，许下愿望：</p><blockquote><p>希望小晶回来，希望违反规则的事情没有发生过</p></blockquote><p>愿望实现了，发出一道光，小心拼命向光中的小晶呼喊：</p><blockquote><p>我们都在同一个世界！要勇敢起来，成长为大人，我在未来等你！</p></blockquote><p>曾经小晶温柔的拥抱小心柔弱的地方，现在轮到小心救赎小晶了。</p><p>之后，大家都回到了现实，关于城堡和这里发生的一切记忆都被消除了。可是大家的生活好像都发生了一些变化，有好像什么都没有变，仿佛一开始就是那样。</p><p>回到现实后，小晶被心里不知道哪里传出来的声音所鼓励，在好好的长大，和喜欢的人结婚了，改名喜多岛晶，并且创建了“心的教室”，帮助那些因为一些原因而不去学校的孩子。原来小晶就是在现实中一直温柔的帮助和鼓励小心的喜多岛老师。</p><p>我们从来都不是孤身一人，总有人会在未来等你，所以你要勇敢的长大。</p><p>所幸，我也好好的长大了。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>死了三次的女孩</title>
    <link href="/2022/04/24/%E3%80%8A%E6%A1%B6%E5%B7%9D%E8%B7%9F%E8%B8%AA%E7%8B%82%E6%9D%80%E4%BA%BA%E4%BA%8B%E4%BB%B6%E3%80%8B/"/>
    <url>/2022/04/24/%E3%80%8A%E6%A1%B6%E5%B7%9D%E8%B7%9F%E8%B8%AA%E7%8B%82%E6%9D%80%E4%BA%BA%E4%BA%8B%E4%BB%B6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读《《桶川跟踪狂杀人事件》有感"><a href="#读《《桶川跟踪狂杀人事件》有感" class="headerlink" title="读《《桶川跟踪狂杀人事件》有感"></a>读《《桶川跟踪狂杀人事件》有感</h2><p>一个女孩被杀了三次，一次是警察，一次是凶手，一次是媒体。<br>作为保护人民的警察，在诗织三番五次的报案下，竟然毫无作为，不接受受理，用各种理由让诗织打消念头。甚至在诗织和家人的努力，不断提供证据好不容易受理之后，跑到诗织家里让诗织撤销报案，这是多么令人绝望的一件事。假如警方早一点提高警惕，早点行动，诗织或许就不会死了。正是警方的不作为和渎职，在命案发生前就杀死了诗织。</p><blockquote><p>“我完全可以理解那天诗织和父母来这里求助之后，如何陷入了绝望。这里病入膏肓。这里没有半个“人”。诗织遭遇了两个不幸。一个是认识了小松，另一个就是住在上尾署的辖区里。”</p></blockquote><p>这里没有半个“人”，这里都是披着人皮的怪物。书中的警察是简直毫无作为，对报案者的生死毫不关心，总是推诿搪塞，根本不配他们身上的那套警服。世界上有多少人已经失去了职业道德，只是把工作当成按时打卡领工资的流水线，对什么都漠不关心，在乎的只是工资高低，年终奖多少。我承认，这是不可避免的，在这个时代，没有人愿意做没有利益的事情，曾经庄重的誓言也能成为虚伪的代名词。在这个时代我们只能祈祷自己不会成为下一个绝望的诗织。</p><p>作者对无良媒体的描写，放到现在也不过时。对受害者外貌的详细刻画：迷你裙、厚底长靴、高级手表、名牌背包…媒体很“客观”的描述了受害者的特征，他们似乎什么都没说，但也什么都说了。刻意对受害者的形象进行描写，让大众产生联想：</p><blockquote><p>穿这么短的裙子，是想勾引谁？<br>戴名牌手表，和那个男人在一起不就是为了钱吗？<br>迷恋名牌，就是一个爱玩，招摇的女孩，难怪会遇上这种男人<br>…</p></blockquote><p>警方片面透露的信息加上媒体片面描写的报道，让诗织又被杀害了一次，在媒体的片面刻画下，作为死者的尊严也丧失了。被害者有害论，这直到20多年后的今天依然存在。各种利刃不断地往受害者身上甩去，现在的网民和诗织案的读者如出一辙，在媒体的片面报道下，对受害者指指点点，在受害者的身上找出被害原因，最终心满意足的打下一行字：就是因为你这样啊，才被害的，不要这样不就好了吗。按下回车键，一柄利刃无情的发送了出去。<br>当然，媒体是左右舆论的重要力量，有时候媒体所谓的客观性其实只是片面的客观罢了，比如一件事有两面性，我只报道了其中一面，你能说是我表达的不客观吗。而且大部分时候，民众也只是被动接收信息，不会花费时间探求事件全貌。</p><blockquote><p>“是因为媒体报道，所以民众关注，还是因为民众关注，媒体才大肆报道？”</p></blockquote><p>如今话语权已经成为这个世界最重要的权利之一。而掌握话语权的媒体，特别是官方媒体，一句话就可以改变社会舆论风向。一篇片面的报道，一则博眼球的新闻就能左右着人们的想法。或许民众是因为看了某篇报道才关注，亦或是因为民众自发的对某件事关注，媒体才下场，这其实无所谓，重要的是媒体在其中扮演一个怎样的角色，是一个客观的记录者，还是主观的引导者，我不知道。</p><p>作者清水洁，作为一个周刊记者，正义和愤怒驱使着他对诗织被害案件持续的追踪。周刊是三流媒体的代名词，以夸张的标题著称，很多新闻资源都是周刊记者得不到的。清水洁也是一个普通的媒体人员，他也会动摇，也会在不暴露嫌疑人和周刊临近截稿之间作斗争，但是当他逐渐深入案件，看到了警方的无能，看到了其他媒体博眼球的报道，以及聆听诗织朋友、家人的倾述之后无形中被托付的那什么，他承担起了自己本不用承担的责任。<br>豆瓣中看到一句话：“人都是复杂的，如果简单把凶手认定为恶魔，等于直接宣布这是小概率随机事件，消解了可能的改变和预防的空间。我们谁都不会觉得自己会碰见恶魔，但事实上，亲密关系中的暴力是极为普遍的。简单粗暴的标签化反而会更多地苛责受害者，加诸新的伤害。”<br>确实，很多人对凶手的印象仍然停留在面目狰狞，心灵扭曲的形象之中。但是现实案件里，加害者往往是熟人作案、亲密关系作案或者冲动作案，甚至可能是我们走在路上擦肩而过的任何人。人性是很复杂的，没有人是单纯的天使，也没有人是单纯的恶魔，每个人的心中都有善的一面和恶的一面，世界上没有完美加害人。就连本案的凶手小松也不例外，小松对诗织的行为，被称为恶魔行径也不为过，但是在另一个女生的描述中，小松也有脆弱、温柔的一面。<br>这是一起让人心碎的案件，读完之后有深深的无力感，我们每个人都有可能成为下一个诗织，但不能保证每次都有一个清水洁寻找真相。<br>诗织是不幸的，也是幸运的，但是那只暗沉无奇，戴了好多年的所谓名牌手表，在那一天，这只表上的指针永远指向了十二点五十分。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们都是无期徒刑</title>
    <link href="/2022/03/16/%E3%80%8A%E6%B6%88%E5%A4%B1%E7%9A%8413%E7%BA%A7%E5%8F%B0%E9%98%B6%E3%80%8B/"/>
    <url>/2022/03/16/%E3%80%8A%E6%B6%88%E5%A4%B1%E7%9A%8413%E7%BA%A7%E5%8F%B0%E9%98%B6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读《消失的13级台阶》有感"><a href="#读《消失的13级台阶》有感" class="headerlink" title="读《消失的13级台阶》有感"></a>读《消失的13级台阶》有感</h2><blockquote><p>我们都是无期徒刑，没有必要假释。</p></blockquote><p>这是一本看完后，会产生许多思考的小说。书中多次探讨死刑的合理性和犯罪之后的悔过态度。</p><p>死刑是最严重的一种刑罚，中国有句话说，一命偿一命，虽然不适用于现在的社会，但是死刑仍然是惩罚犯重罪的犯人的最终刑罚。</p><p>死刑能限制人的恶吗？罗翔老师说过，刑法是对人的最低的道德要求。当一个人触犯了法律，会有对应的惩罚等着他。就像是台阶，一阶一阶的数落着你的罪恶。但是死刑于其他惩罚完全不一样，死刑与人权挂钩，很难用标准来评判死刑是否正确，连一直坚持死刑正确的南乡，在经历了这些事件后也逐步变得无法确定了。例如书中所说的死刑和无期徒刑，可能犯人只是在认错态度上有区别，但是一边是生的希望，一边是却死的绝望。</p><p>正如书中探讨的，司法审判究竟是一种惩罚还是还是改造。如果是作为惩罚，那么对犯罪者施以最严重的惩罚，甚至死刑，让人们知道犯了罪就是要付出代价的，可是世界上还会有这么多的犯罪呢？是缺少对死亡的敬畏吗，所以肆意剥夺他人的生命。或许直到他们踏上死刑台，才会产生畏惧吧。</p><p>不过随着社会的演变，刑法逐渐向如何改造罪犯的角度转变，越来越多的国家废止死刑也可证明这一点。司法审判时可以根据犯罪人的悔过态度酌情减轻刑罚，在日本甚至还有恩赦制度。在监狱，犯人表现良好甚至可以获得减刑和假释。在这个制度下，书中有真心悔过，好好生活的室户英彦，但也有再次杀人的安藤纪夫。或许现有的刑罚制度只能从客观角度对犯人实行惩罚，犯人是否真的会怀有悔过之心回归社会，也没有其他人能够评判。</p><p>纯一为了保护女友，对强奸犯心怀杀意，本是蓄意谋杀，但是却阴差阳错的变为故意伤害，只被判了两年，并且纯一最终坦诚，自己毫无悔过之心。南乡根本没有触犯刑法，但是手握三条人命，却始终陷入无期徒刑的自我审判中。而树原亮根本没有犯罪，却时时刻刻被不知什么时候就会踏上死刑台的恐惧所折磨。</p><p>刑法是件很难带主观情绪去思考的东西，有些人是迫不得已被逼上了犯罪的道路，当你处在相同的境地下，或许也会做出相同的选择，每个人的心中都有恶的成分，就像纯一，当你的幸福被无情的剥夺，法律却无法保护你的时候，就会打开心中的开关，释放出对他人的恶意。我们不知道自己内心的开关会在什么时候打开，或许我们都得怀着心中潜藏的恶意，判处无期徒刑。 </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信任</title>
    <link href="/2022/03/02/%E3%80%8A%E6%80%92%E3%80%8B/"/>
    <url>/2022/03/02/%E3%80%8A%E6%80%92%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="读《怒》有感。"><a href="#读《怒》有感。" class="headerlink" title="读《怒》有感。"></a>读《怒》有感。</h2><p>说来挺有意思的，这本书我本来是当推理小说看的，但是越看越不对劲，书里写了三个故事线，讲述了三个故事中的主人公遇见了一个来历不明的男人之后发生的故事。一点都没提到开头的凶杀案，我一度以为自己可能看了什么盗版。<br>于是上豆瓣瞅了一眼评论，我很其实讨厌被剧透，所以只是简单瞄一眼书友看完此书的感受，大概就是“前半段很无聊，后半段很感人”、“戳中泪点”、“立意很深”之类的。说实话和我的预期有点不一样，我是当作推理小说看的，但是我偶然看到了一条评论：“……直人、田中、田代是同一个人……”。我只看到了这行字，因为害怕被剧透，不敢继续再看了，赶紧关了手机，心想：“这么刺激？”。顿时对这本小说产生了兴趣，并且后悔刚才为什么要看那条评论。<br>所以我一直在把三个故事中的男人当作凶手，分析他们行为的动机，梳理三个故事的时间线，认为三个故事是依次发生的。但是今天阅读到最后一页时，结局与我预想的差距太大，我感觉我好像成为了故事中的一员。</p><p>本书与其说是推理小说，不如说是社会小说，故事一开始就明确了犯罪嫌疑人是山神一也，全书也是围绕在爱子和田代，优树和直人，景、辰哉和田中，以及警察追踪凶手这四条线进行叙述，凶手是三个男人中的一个——田中，但是其他似乎与凶杀案毫无关系的人们，他们的生活也因此发生了巨大的变化。</p><p>田中的逃跑路线其实很明了，犯罪后辗转在工地，每次觉得身份要暴露的时候就辗转到其他地方，最后逃到了波留间岛，在这里隐姓埋名生活。遇到了景，遇到了辰哉，遇到了能接受他的人们，他们互相信任，景在那霸险些被强奸，田中和辰哉互相信守承诺，不会告诉别人在那霸发生的这件事。可是事实是什么，田中是一只披着人皮的怪物，他在星岛废墟的墙上，写下了这段恶俗的文字：</p><blockquote><p>“看到美国兵干一个女的，那女的我认识，好玩儿，有个老头喊了一句 Police 就结束了，别跑啊，美国兵儿干到最后啊，女的晕倒了，好玩儿”</p></blockquote><p>看到这一段文字，辰哉怒了，我也怒了。田中背叛了我们的信任，之前的态度完全是表演出来的，这段文字和墙上一个大大的“怒”字才是他的真实面孔。他或许是内心扭曲的反社会人格，或许是我们不能理解的精神变态，或许是有着悲惨过去的失败者，又或许仅仅是一个易怒的普通人……这些都随着辰哉把刀刺进田中胸口的那个晚上不得而知了。田中的心里是没有由来的“怒”，并且将怒气强加到别人身上，正如那场凶杀案，无缘无故便杀死了两个毫不相干的人。但是辰哉的“怒”却是由保护景这个念头产生的，直到最后，辰哉也没有把景在那霸的事情说出来，尽管这有可能为他减轻惩罚。<br>本书其实讲的是信任的故事，辰哉和景相互信任，但是田中却背叛了这份信任，正因为书中所说：“我是因为信任他，所以无法原谅他”，辰哉杀死田中不是因为他是杀人犯，而是因为他背叛了信任。<br>另外两个故事其实和杀人案并无关系，但是因为杀人案轰动全国，且凶手整过容，所以对身边符合条件的人产生了怀疑。书中讲述的便是其中的两件故事。<br>直人出生在悲惨人家，又因为是同性恋，所以过的很不顺利，但是遇到优树后，他觉得自己得到了救赎，终于不用在意周围人眼光，觉得自己也可以好好生活了，为了不打破这种关系，直人隐瞒了自己心脏有问题的事实。优树其实是希望信任直人的，他曾对自己说，跟怀疑的对象说“我怀疑你”，就等于跟对方说“我相信你”。但是优树没有把信任一直持续下去，怀疑直树是盗窃犯，是通缉犯。直树死亡的那一晚，面对警察的的电话询问，也无法说一句“我认识他”……对于亲近的人，我们不妨多给一些信任。<br>田代因为躲避从父亲那儿“继承”的巨额债务，之前也过着东奔西跑的生活，直到遇见了爱子和洋平，他甚至好好考虑和爱子他们生活在一起的可能性，也开始向往美好的生活。但是也是因为这没有由来的不信任，田代或许是因为过去被发现了，不想拖累他们，所以逃走了，后来也是因为信任爱子他们，所以选择回来共同面对。<br>本书的故事结构令人唏嘘，真正的凶手得到了周围人毫无保留的信任，其他两个清白的人却被亲近的人所怀疑。作者这种刻意营造的结构，令平淡的结局回味无穷。直到最后我们也不知道田中为何杀人，为何在墙上书写大大的“怒”字，优树也永远无法对直人说一句对不起，所幸田代和爱子有机会走向明天。<br>其实书中人物的怀疑并不为过，作者想说的也不仅仅是信任与否这么简单的东西，或许是在探讨怀疑和爱之间，什么更重要吧。<br>怀疑是一种本能，但是爱给与的信任却足以包容一切。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
